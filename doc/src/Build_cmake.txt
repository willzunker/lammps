"Higher level section"_Build.html - "LAMMPS WWW Site"_lws - "LAMMPS
Documentation"_ld - "LAMMPS Commands"_lc :c

:link(lws,http://lammps.sandia.gov)
:link(ld,Manual.html)
:link(lc,Commands_all.html)

:line

Build LAMMPS with CMake :h3

This page is a short summary of how to use CMake to build LAMMPS.
Specific details on CMake variables that enable LAMMPS build options
are given on the pages linked to from the "Build"_Build.html doc page.

Richard Berger (Temple U) has also written a more comprehensive guide
for how to use CMake to build LAMMPS.  If you are new to CMake it is a
good place to start:

"Bulding LAMMPS using
CMake"_https://github.com/rbberger/lammps/tree/cmake_documentation/cmake

:line

Building LAMMPS with CMake is a two-step process.  First use CMake to
create a Makefile.  Then use the standard make command to build
LAMMPS, which uses the created Makefile.

mkdir mydir; cd mydir                  # create a new dir for build          
cmake ~/lammps/cmake \[options ...\]   # command-line version
ccmake ~/lammps/cmake                  # curses version (terminal-style menu)
cmake-gui ~/lammps/cmake               # GUI version
make                                   # traditional make command
make install                           # optional, copy LAMMPS executable & library elsewhere :pre

The make command will compile and link LAMMPS, producing the
executable lmp and the library liblammps.a in mydir.

If your machine has multiple cores (most do), using a command like
"make -j" will be much faster.

:line

There are 3 variants of CMake: a command-line verison, a curses
version (teminal-style menu), and a GUI version.  You can use any of
them to build LAMMPS.  All the versions produce a Makefile as their
output.  See more details on each below.

You can specify a variety of options with any of the 3 versions, which
affect how the build is performed and what is included in the LAMMPS
executable.  Links to pages explaining all the options are listed on
the "Build"_Build.html doc page.

Perform the build in a new directory you create.  It can be a sub-dir
within lammps/cmake or anywhere you wish.  You can perform separate
builds, with different options, in as many directories as you like.
All the auxiliary files created by the build (executable, object
files, log files, etc) are stored in that directory or sub-directories
within it that CMake creates.

NOTE: To perform a CMake build, no packages can be installed in the
LAMMPS src dir.  Likewise no style*.h or a lmpinstalledpkgs.h file can
exist, which are auto-generated by "building LAMMPS via traditional
make"_Build_make.html.  CMake detects if this is not the case and
generates an error, telling you to type "make no-all purge" in the src
directory to un-install all packages.  The purge removes all the
auto-generated *.h files.

You must have CMake version 2.8 or later on your system to build
LAMMPS.  If you include the GPU package, version 3.2 or later is
required.  Installation instructions for CMake are below.

After the initial build, if you edit LAMMPS source files, or add your
own new files to the source directory, you can just re-type make from
your build directory and it will re-compile only the files that have
changed.  If you want to change CMake options, you can remove the
cache file CMakeCache.txt in the build directory and start over.  Or
you can run cmake again from the same build directory and alter
various options; see details below.

:line

[Command-line version of CMake]:

cmake \[options ...\] ~/lammps/cmake      # build from any dir
cmake \[options ...\] ..                  # build from lammps/cmake/newdir :pre

The cmake command takes one required argument, which is the LAMMPS
cmake directory which contains the CMakeLists.txt file.

The argument can be preceeded or followed by various CMake
command-line options.  Several useful ones are:

CAKE_INSTALL_PREFIX=path  # where to install LAMMPS executable/lib if desired
CMAKE_BUILD_TYPE=type     # type = Release or Debug
-G output                 # style of output CMake generates
-DVARIABLE=value          # setting for a LAMMPS feature to enable
-D VARIABLE=value         # ditto, but cannot come after CMakeLists.txt dir

All the LAMMPS-specific -D variables that a LAMMPS build supports are
described on the pages linked to from the "Build"_Build.html doc page.
All of these variable names are upper-case and their values are
lower-case, e.g. -D LAMMPS_SIZES=smallbig.  For boolean values, any of
these forms can be used: yes/no, on/off, 1/0.

By default CMake generates a Makefile to perform the LAMMPS build.
Alternate forms of build info can be generated via the -G switch,
e.g. Visual Studio on a Windows machine.  Type "cmake --help" to see
the "Generator" styles of output your system supports.

NOTE: When CMake runs, it prints configuration info to the screen.
You should scan this to verify all the features you requested were
enabled, including packages.  You can also see what compiler and
compile options will be used for the build.  Any errors will also be
flagged, e.g. mis-typed variable names or variable values.

CMake creates a CMakeCache.txt file when it runs.  This stores all the
settings, so that running CMake again from the same directory will
inherit those settings.

TODO: explain how to change settings on a subsequent cmake in the same
build dir.  In that case is "." the final arg of cmake?

[Curses version (terminal-style menu) of CMake]:

ccmake ~/lammps/cmake :pre

TODO: give brief explanation of how to find and toggle options, how to
perform the generate, how to use it multiple times.

[GUI version of CMake]:

cmake-gui ~/lammps/cmake :pre

TODO: give brief explanation of how to find and toggle options, how to
perform the generate, how to use it multiple times.

:line

[Installing CMake]

Check if your machine already has CMake installed:

which cmake             # do you have it?
which cmake3            # version 3 may have this name
cmake --version         # what specific version you have :pre

On clusters or supercomputers which use modules to manage software
packages, do this:

module list            # is a cmake module is already loaded
module avail           # is a cmake module available?
module load cmake3     # load cmake module with appropriate name :pre

If you do not have CMake or a new enough version, you can install it
as follows:

TODO: give install instructions for Linux, Mac, Windows

