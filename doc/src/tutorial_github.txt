"LAMMPS WWW Site"_lws - "LAMMPS Documentation"_ld - "LAMMPS Commands"_lc :c

:link(lws,http://lammps.sandia.gov)
:link(ld,Manual.html)
:link(lc,Section_commands.html#comm)

:line

LAMMPS GitHub tutorial :h3
[written by Stefan Paquay]

:line

This document briefly describes how to use GitHub to merge changes you
make into LAMMPS, using GitHub. It assumes that you are familiar with
git. You may want to have a look at the "Git
book"_http://git-scm.com/book/ to reacquaint yourself.

:line

[Making an account]

First of all, you need a GitHub account. This is fairly simple, just
go to "GitHub"_https://github.com and create an account by clicking
the "Sign up for GitHub" button. Once your account is created, you
can sign in by clicking the button in the top left and filling in your
username or e-mail address and password.

:line

[Forking the repository]

To get changes into LAMMPS, you need to first fork the repository. At
the time of writing, master is the preferred branch. Go to "LAMMPS
on GitHub"_https://github.com/lammps/lammps and make sure branch is
set to "master", see the figure below.

:c,image(JPG/tutorial_branch.png)

If it is not, use the button to change it to master. Once it is, use the
fork button to create a fork.

:c,image(JPG/tutorial_fork.png)


This will create your own fork of the LAMMPS repository. You can make
changes in this fork and later file {pull requests} to allow the
upstream repository to merge changes from your own fork into the one
we just forked from. At the same time, you can set things up, so you
can include changes from upstream into your repository.

:line

[Adding changes to your own fork]

Additions to the upstream version of LAMMPS are handled using {feature branches}.
For every new feature, a so-called feature branch is created, which contains only
those modification relevant to one specific feature. For example, adding a single
fix would consist of creating a branch with only the fix header and source file
and nothing else.
It is explained in more detail here: "feature branch
workflow"_https://www.atlassian.com/git/tutorials/comparing-workflows/feature-branch-workflow.

[Feature branches]

First of all, create a clone of your version on github on your local machine via HTTPS

  $ git clone https://github.com/<your user name>/lammps.git <some name> :pre

or, if you have SSH keys setup, using your SSH key:

  $ git clone git@github.com:<your user name>/lammps.git :pre
  
You can find the proper url by clicking the "Clone or download"-button:

:c,image(JPG/tutorial_https_block.png)

The above command copies ("clones") the git repository to your local
machine to a directory with the name you chose. If none is given, it will
default to "lammps". Typical names are "mylammps" or something similar.

You can use this local clone to make changes and
test them without interfering with the repository on Github.

To pull changes from upstream into this copy, you can go to the directory
and use git pull:

  $ cd mylammps :pre
  $ git pull https://github.com/lammps/lammps :pre

You can also add this url as a remote:

  $ git remote add lammps_upstream https://www.github.com/lammps/lammps :pre

At this point, you typically make a feature branch for the feature you
want to work on. This tutorial contains the workflow that updated this
tutorial, and hence we will call the branch "github-tutorial-update":

  $ git checkout -b github-tutorial-update :pre

Now that we have changed branches, we can make our changes to our local
repository. Just remember that if you want to start working on another,
unrelated feature, you should switch branches!

[After changes are made]

After everything is done, add the files to the branch and commit them:

  $ git add doc/src/tutorial_github.txt :pre
  $ git add doc/src/JPG/tutorial_*.png :pre

[Warning]

{"Do not use "git commit -a".  the -a flag will automatically include
*all* modified or new files.  mercurial does that and it find it
hugely annoying and often leading to accidental commits of files you
don't want.  use git add, git rm, git mv for adding, removing,
renaming and then git commit to finalize the commit.  personally, i
find it very convenient to use the bundled gui for commits, i.e. git
gui.  typically, i will do git add and other operations, but then
verify and review them with git gui.  git gui also allows to do
line-by-line unstaging and other convenient operations." - Axel}

After adding all files, the change can be commited with some useful message
that explains the change.

  $ git commit -m 'Finally updated the github tutorial' :pre

After the commit, the changes can be pushed to the same branch on GitHub:

$ git push :pre

Git will ask you for your user name and password on GitHub if you have
not configured anything. If you correctly type your user name and
password, the change should be added to your fork on GitHub.

If you want to make really sure you push to the right repository
(which is good practice), you can provide it explicitly:

$ git push origin :pre

or using an explicit URL:

$ git push git@github.com:Pakketeretet2/lammps.git :pre

