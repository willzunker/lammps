# Test runs of AIMD with LAMMPS and LATTE

Step 1: build LAMMPS
Step 2: download/build the MDI code coupling package
Step 3: download/build or install LATTE
Step 4: run the water AIMD problem for a few steps

---------------------------------
---------------------------------

Step 1: build LAMMPS

The molecule package is needed.  Copy the final LAMMPS executable into
the examples/QUANTUM/LATTE directory.

Traditional make:

% cd ~/lammps/lib/mdi
% python Install.py -m mpi
% cd ~/lammps/src
% make yes-mdi yes-molecule
% make -j mpi
% cp lmp_mpi ~/lammps/examples/QUANTUM/LATTE

CMake:

% cd ~/lammps
% mkdir build; cd build
% cmake -DPKG_MDI=yes -DPKG_MOLECULE=yes ../cmake
% make -j
% cp lmp ~/lammps/examples/QUANTUM/LATTE/lmp_mpi

---------------------------------
---------------------------------

Step 2: download/build MDI code coupling package

(a) clone the MDI Git repo

% mkdir mdi; cd mdi
% git clone git@github.com:MolSSI-MDI/MDI_Library.git git

(b) build MDI

% cd mdi/git
% mkdir build; cd build
% cmake ..
% make -j

(c) Add a line like this to your ~/.bashrc or ~/.cshrc file so that
Python can find MDI:

For bash:

% export PYTHONPATH="$PYTHONPATH:/home/sjplimp/mdi/git"
% hash -r

For (t)csh:

% setenv PYTHONPATH ${PYTHONPATH}:/home/sjplimp/mdi/git
% rehash

---------------------------------
---------------------------------

Step 3: download/build LATTE

(a) clone the skimLATTE repo

% mkdir latte; cd latte
% git clone git@github.com:lanl/LATTE.git git

(b) build LATTE as a shared library

% cd ~/latte/git
% mkdir build; cd build
% cmake -DBUILD_SHARED_LIBS=on ../cmake
% make

(c) Add a line like this to your ~/.bashrc or ~/.cshrc file so that
the liblatte.so file can be found:

For bash:

% export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:/home/sjplimp/latte/git/build"
% hash -r

For (t)csh:

% setenv LD_LIBRARY_PATH ${LD_LIBRARY_PATH}:/home/sjplimp/latte/git/build
% rehash

---------------------------------
---------------------------------

Step 4: perform test runs in any of 3 modes

These tests are in lammps/examples/QUANTUM/LATTE

in.ch4 = AIMD with CH4 molecule
in.graphene = AIMD with graphene
in.series = series of 3 UO2 conformations
in.sucrose = AIMD of sucrose molecule
in.uo2 = two molecules of UO2
in.water = eight water molecules

** run 2 executables with TCP/IP, 1 proc each

lmp_mpi -mdi "-name LMP -role DRIVER -method TCP -port 8021" -log log.water.tcp.1 -in in.water &
python latte_mdi.py -mdi "-name LATTE -role ENGINE -method TCP -port 8021 -hostname localhost" latte.in.water

lmp_mpi -mdi "-name LMP -role DRIVER -method TCP -port 8021" -log log.uo2.tcp.1 -in in.uo2 &
python latte_mdi.py -mdi "-name LATTE -role ENGINE -method TCP -port 8021 -hostname localhost" latte.in.uo2

lmp_mpi -mdi "-name LMP -role DRIVER -method TCP -port 8021" -log log.series.tcp.1 -in in.series &
python latte_mdi.py -mdi "-name LATTE -role ENGINE -method TCP -port 8021 -hostname localhost" latte.in.uo2

** run 2 executables with MPI, 1 proc each

mpirun -np 1 lmp_mpi -mdi "-name LMP -role DRIVER -method MPI" -log log.water.mpi.1 -in in.water : -np 1 python latte_mdi.py -mdi "-name LATTE -role ENGINE -method MPI" latte.in.water

mpirun -np 1 lmp_mpi -mdi "-name LMP -role DRIVER -method MPI" -log log.water.min.mpi.1 -in in.water.min : -np 1 python latte_mdi.py -mdi "-name LATTE -role ENGINE -method MPI" latte.in.generic

mpirun -np 1 lmp_mpi -mdi "-name LMP -role DRIVER -method MPI" -log log.uo2.mpi.1 -in in.uo2 : -np 1 python latte_mdi.py -mdi "-name LATTE -role ENGINE -method MPI" latte.in.uo2

mpirun -np 1 lmp_mpi -mdi "-name LMP -role DRIVER -method MPI" -log log.ch4.mpi.1 -in in.ch4 : -np 1 python latte_mdi.py -mdi "-name LATTE -role ENGINE -method MPI" latte.in.generic

mpirun -np 1 lmp_mpi -mdi "-name LMP -role DRIVER -method MPI" -log log.sucrose.mpi.1 -in in.sucrose : -np 1 python latte_mdi.py -mdi "-name LATTE -role ENGINE -method MPI" latte.in.generic

mpirun -np 1 lmp_mpi -mdi "-name LMP -role DRIVER -method MPI" -log log.graphene.mpi.1 -in in.graphene : -np 1 python latte_mdi.py -mdi "-name LATTE -role ENGINE -method MPI" latte.in.generic

mpirun -np 1 lmp_mpi -mdi "-name LMP -role DRIVER -method MPI" -log log.series.mpi.1 -in in.series : -np 1 python latte_mdi.py -mdi "-name LATTE -role ENGINE -method MPI" latte.in.uo2

** run LATTE as plugin MDI engine, on 1 proc

lmp_mpi -mdi "-name LMP -role DRIVER -method LINK -plugin_path /home/sjplimp/lammps/git/examples/QUANTUM/LATTE" -log log.water.plugin.1 -in in.water.plugin

lmp_mpi -mdi "-name LMP -role DRIVER -method LINK -plugin_path /home/sjplimp/lammps/git/examples/QUANTUM/LATTE" -log log.water.min.plugin.1 -in in.water.min.plugin

lmp_mpi -mdi "-name LMP -role DRIVER -method LINK -plugin_path /home/sjplimp/lammps/git/examples/QUANTUM/LATTE" -log log.uo2.plugin.1 -in in.uo2.plugin

lmp_mpi -mdi "-name LMP -role DRIVER -method LINK -plugin_path /home/sjplimp/lammps/git/examples/QUANTUM/LATTE" -log log.ch4.plugin.1 -in in.ch4.plugin

lmp_mpi -mdi "-name LMP -role DRIVER -method LINK -plugin_path /home/sjplimp/lammps/git/examples/QUANTUM/LATTE" -log log.sucrose.plugin.1 -in in.sucrose.plugin

lmp_mpi -mdi "-name LMP -role DRIVER -method LINK -plugin_path /home/sjplimp/lammps/git/examples/QUANTUM/LATTE" -log log.graphene.plugin.1 -in in.graphene.plugin

lmp_mpi -mdi "-name LMP -role DRIVER -method LINK -plugin_path /home/sjplimp/lammps/git/examples/QUANTUM/LATTE" -log log.series.plugin.1 -in in.series.plugin
