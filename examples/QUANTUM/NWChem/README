# Test runs with coupling of LAMMPS and NWChem PWDFT

Step 0: What NWChem currently supports
Step 1: build LAMMPS
Step 2: Download/build MDI code coupling package
Step 3: Download/build NWChem PWDFT
Step 4: Perform test runs in any of 3 modes

---------------------------------
---------------------------------

Step 0: What NWChem currently supports

NWChem can be used with fix mdi/qm to perform QM calculations of an
entire system and with fix mdi/qmmm for QMMM simulations.  For QMMM it
can use the potential mode of fix mdi/qmmm, but not the direct mode.
NWChem can calculate a QM energy and QM forces on each atom, but it
cannot compute a QM stress tensor.

---------------------------------
---------------------------------

Step 1: Build LAMMPS

The MDI and molecule packags are needed.  Copy the final LAMMPS
executable into the examples/QUANTUM/NWChem directory.

Traditional make:

% cd ~/lammps/lib/mdi
% python Install.py -m mpi
% cd ~/lammps/src
% make yes-mdi yes-molecule
% make -j mpi
% cp lmp_mpi ~/lammps/examples/QUANTUM/NWChem

CMake:

% cd ~/lammps
% mkdir build; cd build
% cmake -DPKG_MDI=yes -DPKG_MOLECULE=yes ../cmake
% make -j
% cp lmp ~/lammps/examples/QUANTUM/NWChem/lmp_mpi

---------------------------------
---------------------------------

Step 2: Download/build MDI code coupling package

(a) clone the MDI Git repo

% mkdir mdi; cd mdi
% git clone git@github.com:MolSSI-MDI/MDI_Library.git git

(b) build MDI

% cd mdi/git
% mkdir build; cd build
% cmake ..
% make -j

(c) Add a line like this to your ~/.bashrc or ~/.cshrc file so that
Python can find MDI:

For bash:

% export PYTHONPATH="$PYTHONPATH:/home/sjplimp/mdi/git"
% hash -r

For (t)csh:

% setenv PYTHONPATH ${PYTHONPATH}:/home/sjplimp/mdi/git
% rehash

(d) Check import of 3 Python modules which the script that wraps
NWChem will need:

% python
>>> import numpy as np
>>> from mpi4py import MPI
>>> import MDI_Library as mdi

---------------------------------
---------------------------------

Step 3: Download/build NWChem PWDFT

(a) clone the PWDFT Git repo

% mkdir nwchem; cd nwchem
% git clone git@github.com:ebylaska/PWDFT.git PWDFT

(b) build PWDFT

% cd ~/nwchem/PWDFT
% cd build_library; rm -r *
% cmake -DMAKE_LIBRARY=true -DCMAKE_POSITION_INDEPENDENT_CODE=ON ../Nwpw 
% make -j        # should produce libpwdft.so in build_library

(c) Add a line like this to your ~/.bashrc or !/.cshrc
file so that the libpwdft.so file can be found:

For bash:

% export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:/home/sjplimp/nwchem/PWDFT/build_library"
% hash -r

For (t)csh:

% setenv LD_LIBRARY_PATH ${LD_LIBRARY_PATH}:/home/sjplimp/nwchem/PWDFT/build_library
% rehash

---------------------------------
---------------------------------

Step 4: Perform test runs in any of 3 modes

These tests are in lammps/examples/QUANTUM/NWChem

in.series = series of several W conformations
in.water.qmmm = QMMM of two-water system, 1 QM + 1 MM
in.zeolite.qmmm = QMMM of zeolite, MM zeolite + QM methane molecule

** run LAMMPS-only versions of water and zeolite problems

lmp_mpi -log log.water.mm.1 < in.water.mm

lmp_mpi -log log.zeolite.mm.1 < in.zeolite.mm

** run LAMMPS and PWDFT with TCP/IP, 1 or more procs each

lmp_mpi -mdi "-name LMP -role DRIVER -method TCP -port 8021" -log log.series.tcp.1 -in in.series &
python nwchem_mdi.py -mdi "-name NWChem -role ENGINE -method TCP -port 8021 -hostname localhost" template.w.nw w.nw log.series.pwdft.tcp.1

lmp_mpi -mdi "-name LMP -role DRIVER -method TCP -port 8021" -log log.water.qmmm.tcp.1 -in in.water.qmmm &
mpirun -np 2 python nwchem_mdi.py -mdi "-name NWChem -role ENGINE -method TCP -port 8021 -hostname localhost" template.water.nw water.nw log.water.pwdft.qmmm.tcp.2

lmp_mpi -mdi "-name LMP -role DRIVER -method TCP -port 8021" -log log.zeolite.qmmm.tcp.1 -in in.zeolite.qmmm &
mpirun -np 8 python nwchem_mdi.py -mdi "-name NWChem -role ENGINE -method TCP -port 8021 -hostname localhost" template.methane.nw methane.nw log.zeolite.pwdft.qmmm.tcp.8

** run LAMMPS and PWDFT with MPI, 1 or more procs each

mpirun -np 1 lmp_mpi -mdi "-name LMP -role DRIVER -method MPI" -log log.series.mpi.1 -in in.series : -np 1 python nwchem_mdi.py -mdi "-name NWChem -role ENGINE -method MPI" template.w.nw w.nw log.series.pwdft.mpi.1

mpirun -np 1 lmp_mpi -mdi "-name LMP -role DRIVER -method MPI" -log log.water.qmmm.mpi.1 -in in.water.qmmm : -np 2 python nwchem_mdi.py -mdi "-name NWChem -role ENGINE -method MPI" template.water.nw water.nw log.water.pwdft.qmmm.mpi.2

mpirun -np 1 lmp_mpi -mdi "-name LMP -role DRIVER -method MPI" -log log.zeolite.qmmm.mpi.1 -in in.zeolite.qmmm : -np 8 python nwchem_mdi.py -mdi "-name NWChem -role ENGINE -method MPI" template.methane.nw methane.nw log.zeolite.pwdft.qmmm.mpi.8

** run PWDFT as plugin MDI engine, 1 or more procs

lmp_mpi -mdi "-name LMP -role DRIVER -method LINK -plugin_path /home/sjplimp/lammps/git/examples/QUANTUM/NWChem" -log log.series.plugin.1 -in in.series.plugin

mpirun -np 2 lmp_mpi -mdi "-name LMP -role DRIVER -method LINK -plugin_path /home/sjplimp/lammps/git/examples/QUANTUM/NWChem" -log log.water.qmmm.plugin.2 -in in.water.qmmm.plugin

mpirun -np 8 lmp_mpi -mdi "-name LMP -role DRIVER -method LINK -plugin_path /home/sjplimp/lammps/git/examples/QUANTUM/NWChem" -log log.zeolite.qmmm.plugin.8 -in in.zeolite.qmmm.plugin
