diff --git a/lib/kokkos/core/src/Cuda/Kokkos_Cuda_KernelLaunch.hpp b/lib/kokkos/core/src/Cuda/Kokkos_Cuda_KernelLaunch.hpp
index 170183ca0a..ba43e362bb 100644
--- a/lib/kokkos/core/src/Cuda/Kokkos_Cuda_KernelLaunch.hpp
+++ b/lib/kokkos/core/src/Cuda/Kokkos_Cuda_KernelLaunch.hpp
@@ -412,12 +412,16 @@ struct CudaParallelLaunchKernelInvoker<
       Impl::check_shmem_request(cuda_instance, shmem);
       if (DriverType::Policy::
                         experimental_contains_desired_occupancy) {
+      /*
         int desired_occupancy =
             driver.get_policy().impl_get_desired_occupancy().value();
         size_t block_size = block.x * block.y * block.z;
         Impl::configure_shmem_preference<DriverType, LaunchBounds>(
             base_t::get_kernel_func(), cuda_instance->m_deviceProp, block_size,
-            shmem, desired_occupancy);
+            shmem, desired_occupancy);*/
+        Kokkos::Impl::throw_runtime_exception(
+        std::string("Cuda graph node creation FAILED:"
+                    " occupancy requests are currently broken."));
       }
 
       void const* args[] = {&driver};
@@ -511,14 +515,17 @@ struct CudaParallelLaunchKernelInvoker<
 
     if (!Impl::is_empty_launch(grid, block)) {
       Impl::check_shmem_request(cuda_instance, shmem);
-      if constexpr (DriverType::Policy::
+      if (DriverType::Policy::
                         experimental_contains_desired_occupancy) {
-        int desired_occupancy =
+        /*int desired_occupancy =
             driver.get_policy().impl_get_desired_occupancy().value();
         size_t block_size = block.x * block.y * block.z;
         Impl::configure_shmem_preference<DriverType, LaunchBounds>(
             base_t::get_kernel_func(), cuda_instance->m_deviceProp, block_size,
-            shmem, desired_occupancy);
+            shmem, desired_occupancy);*/
+        Kokkos::Impl::throw_runtime_exception(
+        std::string("Cuda graph node creation FAILED:"
+                    " occupancy requests are currently broken."));
       }
 
       auto* driver_ptr = Impl::allocate_driver_storage_for_kernel(driver);
@@ -690,14 +697,17 @@ struct CudaParallelLaunchImpl<
 
       if (DriverType::Policy::
                         experimental_contains_desired_occupancy) {
-        int desired_occupancy =
+        /*int desired_occupancy =
             driver.get_policy().impl_get_desired_occupancy().value();
         size_t block_size = block.x * block.y * block.z;
         Impl::configure_shmem_preference<
             DriverType,
             Kokkos::LaunchBounds<MaxThreadsPerBlock, MinBlocksPerSM>>(
             base_t::get_kernel_func(), cuda_instance->m_deviceProp, block_size,
-            shmem, desired_occupancy);
+            shmem, desired_occupancy);*/
+        Kokkos::Impl::throw_runtime_exception(
+        std::string("Cuda graph node creation FAILED:"
+                    " occupancy requests are currently broken."));
       }
 
       KOKKOS_ENSURE_CUDA_LOCK_ARRAYS_ON_DEVICE();
