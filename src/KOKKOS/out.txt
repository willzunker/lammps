atom_vec_angle_kokkos.cpp:    k_count.modify<LMPDeviceType>();
atom_vec_angle_kokkos.cpp:    if (mask & X_MASK) atomKK->k_x.modify<LMPDeviceType>();
atom_vec_angle_kokkos.cpp:    if (mask & V_MASK) atomKK->k_v.modify<LMPDeviceType>();
atom_vec_angle_kokkos.cpp:    if (mask & F_MASK) atomKK->k_f.modify<LMPDeviceType>();
atom_vec_angle_kokkos.cpp:    if (mask & TAG_MASK) atomKK->k_tag.modify<LMPDeviceType>();
atom_vec_angle_kokkos.cpp:    if (mask & TYPE_MASK) atomKK->k_type.modify<LMPDeviceType>();
atom_vec_angle_kokkos.cpp:    if (mask & MASK_MASK) atomKK->k_mask.modify<LMPDeviceType>();
atom_vec_angle_kokkos.cpp:    if (mask & IMAGE_MASK) atomKK->k_image.modify<LMPDeviceType>();
atom_vec_angle_kokkos.cpp:    if (mask & MOLECULE_MASK) atomKK->k_molecule.modify<LMPDeviceType>();
atom_vec_angle_kokkos.cpp:      atomKK->k_nspecial.modify<LMPDeviceType>();
atom_vec_angle_kokkos.cpp:      atomKK->k_special.modify<LMPDeviceType>();
atom_vec_angle_kokkos.cpp:      atomKK->k_num_bond.modify<LMPDeviceType>();
atom_vec_angle_kokkos.cpp:      atomKK->k_bond_type.modify<LMPDeviceType>();
atom_vec_angle_kokkos.cpp:      atomKK->k_bond_atom.modify<LMPDeviceType>();
atom_vec_angle_kokkos.cpp:      atomKK->k_num_angle.modify<LMPDeviceType>();
atom_vec_angle_kokkos.cpp:      atomKK->k_angle_type.modify<LMPDeviceType>();
atom_vec_angle_kokkos.cpp:      atomKK->k_angle_atom1.modify<LMPDeviceType>();
atom_vec_angle_kokkos.cpp:      atomKK->k_angle_atom2.modify<LMPDeviceType>();
atom_vec_angle_kokkos.cpp:      atomKK->k_angle_atom3.modify<LMPDeviceType>();
atom_vec_atomic_kokkos.cpp:    k_count.modify<LMPDeviceType>();
atom_vec_atomic_kokkos.cpp:    if (mask & X_MASK) atomKK->k_x.modify<LMPDeviceType>();
atom_vec_atomic_kokkos.cpp:    if (mask & V_MASK) atomKK->k_v.modify<LMPDeviceType>();
atom_vec_atomic_kokkos.cpp:    if (mask & F_MASK) atomKK->k_f.modify<LMPDeviceType>();
atom_vec_atomic_kokkos.cpp:    if (mask & TAG_MASK) atomKK->k_tag.modify<LMPDeviceType>();
atom_vec_atomic_kokkos.cpp:    if (mask & TYPE_MASK) atomKK->k_type.modify<LMPDeviceType>();
atom_vec_atomic_kokkos.cpp:    if (mask & MASK_MASK) atomKK->k_mask.modify<LMPDeviceType>();
atom_vec_atomic_kokkos.cpp:    if (mask & IMAGE_MASK) atomKK->k_image.modify<LMPDeviceType>();
atom_vec_bond_kokkos.cpp:    k_count.modify<LMPDeviceType>();
atom_vec_bond_kokkos.cpp:    if (mask & X_MASK) atomKK->k_x.modify<LMPDeviceType>();
atom_vec_bond_kokkos.cpp:    if (mask & V_MASK) atomKK->k_v.modify<LMPDeviceType>();
atom_vec_bond_kokkos.cpp:    if (mask & F_MASK) atomKK->k_f.modify<LMPDeviceType>();
atom_vec_bond_kokkos.cpp:    if (mask & TAG_MASK) atomKK->k_tag.modify<LMPDeviceType>();
atom_vec_bond_kokkos.cpp:    if (mask & TYPE_MASK) atomKK->k_type.modify<LMPDeviceType>();
atom_vec_bond_kokkos.cpp:    if (mask & MASK_MASK) atomKK->k_mask.modify<LMPDeviceType>();
atom_vec_bond_kokkos.cpp:    if (mask & IMAGE_MASK) atomKK->k_image.modify<LMPDeviceType>();
atom_vec_bond_kokkos.cpp:    if (mask & MOLECULE_MASK) atomKK->k_molecule.modify<LMPDeviceType>();
atom_vec_bond_kokkos.cpp:      atomKK->k_nspecial.modify<LMPDeviceType>();
atom_vec_bond_kokkos.cpp:      atomKK->k_special.modify<LMPDeviceType>();
atom_vec_bond_kokkos.cpp:      atomKK->k_num_bond.modify<LMPDeviceType>();
atom_vec_bond_kokkos.cpp:      atomKK->k_bond_type.modify<LMPDeviceType>();
atom_vec_bond_kokkos.cpp:      atomKK->k_bond_atom.modify<LMPDeviceType>();
atom_vec_charge_kokkos.cpp:    k_count.modify<LMPDeviceType>();
atom_vec_charge_kokkos.cpp:    if (mask & X_MASK) atomKK->k_x.modify<LMPDeviceType>();
atom_vec_charge_kokkos.cpp:    if (mask & V_MASK) atomKK->k_v.modify<LMPDeviceType>();
atom_vec_charge_kokkos.cpp:    if (mask & F_MASK) atomKK->k_f.modify<LMPDeviceType>();
atom_vec_charge_kokkos.cpp:    if (mask & TAG_MASK) atomKK->k_tag.modify<LMPDeviceType>();
atom_vec_charge_kokkos.cpp:    if (mask & TYPE_MASK) atomKK->k_type.modify<LMPDeviceType>();
atom_vec_charge_kokkos.cpp:    if (mask & MASK_MASK) atomKK->k_mask.modify<LMPDeviceType>();
atom_vec_charge_kokkos.cpp:    if (mask & IMAGE_MASK) atomKK->k_image.modify<LMPDeviceType>();
atom_vec_charge_kokkos.cpp:    if (mask & Q_MASK) atomKK->k_q.modify<LMPDeviceType>();
atom_vec_full_kokkos.cpp:    k_count.modify<LMPDeviceType>();
atom_vec_full_kokkos.cpp:    if (mask & X_MASK) atomKK->k_x.modify<LMPDeviceType>();
atom_vec_full_kokkos.cpp:    if (mask & V_MASK) atomKK->k_v.modify<LMPDeviceType>();
atom_vec_full_kokkos.cpp:    if (mask & F_MASK) atomKK->k_f.modify<LMPDeviceType>();
atom_vec_full_kokkos.cpp:    if (mask & TAG_MASK) atomKK->k_tag.modify<LMPDeviceType>();
atom_vec_full_kokkos.cpp:    if (mask & TYPE_MASK) atomKK->k_type.modify<LMPDeviceType>();
atom_vec_full_kokkos.cpp:    if (mask & MASK_MASK) atomKK->k_mask.modify<LMPDeviceType>();
atom_vec_full_kokkos.cpp:    if (mask & IMAGE_MASK) atomKK->k_image.modify<LMPDeviceType>();
atom_vec_full_kokkos.cpp:    if (mask & Q_MASK) atomKK->k_q.modify<LMPDeviceType>();
atom_vec_full_kokkos.cpp:    if (mask & MOLECULE_MASK) atomKK->k_molecule.modify<LMPDeviceType>();
atom_vec_full_kokkos.cpp:      atomKK->k_nspecial.modify<LMPDeviceType>();
atom_vec_full_kokkos.cpp:      atomKK->k_special.modify<LMPDeviceType>();
atom_vec_full_kokkos.cpp:      atomKK->k_num_bond.modify<LMPDeviceType>();
atom_vec_full_kokkos.cpp:      atomKK->k_bond_type.modify<LMPDeviceType>();
atom_vec_full_kokkos.cpp:      atomKK->k_bond_atom.modify<LMPDeviceType>();
atom_vec_full_kokkos.cpp:      atomKK->k_num_angle.modify<LMPDeviceType>();
atom_vec_full_kokkos.cpp:      atomKK->k_angle_type.modify<LMPDeviceType>();
atom_vec_full_kokkos.cpp:      atomKK->k_angle_atom1.modify<LMPDeviceType>();
atom_vec_full_kokkos.cpp:      atomKK->k_angle_atom2.modify<LMPDeviceType>();
atom_vec_full_kokkos.cpp:      atomKK->k_angle_atom3.modify<LMPDeviceType>();
atom_vec_full_kokkos.cpp:      atomKK->k_num_dihedral.modify<LMPDeviceType>();
atom_vec_full_kokkos.cpp:      atomKK->k_dihedral_type.modify<LMPDeviceType>();
atom_vec_full_kokkos.cpp:      atomKK->k_dihedral_atom1.modify<LMPDeviceType>();
atom_vec_full_kokkos.cpp:      atomKK->k_dihedral_atom2.modify<LMPDeviceType>();
atom_vec_full_kokkos.cpp:      atomKK->k_dihedral_atom3.modify<LMPDeviceType>();
atom_vec_full_kokkos.cpp:      atomKK->k_dihedral_atom4.modify<LMPDeviceType>();
atom_vec_full_kokkos.cpp:      atomKK->k_num_improper.modify<LMPDeviceType>();
atom_vec_full_kokkos.cpp:      atomKK->k_improper_type.modify<LMPDeviceType>();
atom_vec_full_kokkos.cpp:      atomKK->k_improper_atom1.modify<LMPDeviceType>();
atom_vec_full_kokkos.cpp:      atomKK->k_improper_atom2.modify<LMPDeviceType>();
atom_vec_full_kokkos.cpp:      atomKK->k_improper_atom3.modify<LMPDeviceType>();
atom_vec_full_kokkos.cpp:      atomKK->k_improper_atom4.modify<LMPDeviceType>();
atom_vec_molecular_kokkos.cpp:    k_count.modify<LMPDeviceType>();
atom_vec_molecular_kokkos.cpp:    if (mask & X_MASK) atomKK->k_x.modify<LMPDeviceType>();
atom_vec_molecular_kokkos.cpp:    if (mask & V_MASK) atomKK->k_v.modify<LMPDeviceType>();
atom_vec_molecular_kokkos.cpp:    if (mask & F_MASK) atomKK->k_f.modify<LMPDeviceType>();
atom_vec_molecular_kokkos.cpp:    if (mask & TAG_MASK) atomKK->k_tag.modify<LMPDeviceType>();
atom_vec_molecular_kokkos.cpp:    if (mask & TYPE_MASK) atomKK->k_type.modify<LMPDeviceType>();
atom_vec_molecular_kokkos.cpp:    if (mask & MASK_MASK) atomKK->k_mask.modify<LMPDeviceType>();
atom_vec_molecular_kokkos.cpp:    if (mask & IMAGE_MASK) atomKK->k_image.modify<LMPDeviceType>();
atom_vec_molecular_kokkos.cpp:    if (mask & MOLECULE_MASK) atomKK->k_molecule.modify<LMPDeviceType>();
atom_vec_molecular_kokkos.cpp:      atomKK->k_nspecial.modify<LMPDeviceType>();
atom_vec_molecular_kokkos.cpp:      atomKK->k_special.modify<LMPDeviceType>();
atom_vec_molecular_kokkos.cpp:      atomKK->k_num_bond.modify<LMPDeviceType>();
atom_vec_molecular_kokkos.cpp:      atomKK->k_bond_type.modify<LMPDeviceType>();
atom_vec_molecular_kokkos.cpp:      atomKK->k_bond_atom.modify<LMPDeviceType>();
atom_vec_molecular_kokkos.cpp:      atomKK->k_num_angle.modify<LMPDeviceType>();
atom_vec_molecular_kokkos.cpp:      atomKK->k_angle_type.modify<LMPDeviceType>();
atom_vec_molecular_kokkos.cpp:      atomKK->k_angle_atom1.modify<LMPDeviceType>();
atom_vec_molecular_kokkos.cpp:      atomKK->k_angle_atom2.modify<LMPDeviceType>();
atom_vec_molecular_kokkos.cpp:      atomKK->k_angle_atom3.modify<LMPDeviceType>();
atom_vec_molecular_kokkos.cpp:      atomKK->k_num_dihedral.modify<LMPDeviceType>();
atom_vec_molecular_kokkos.cpp:      atomKK->k_dihedral_type.modify<LMPDeviceType>();
atom_vec_molecular_kokkos.cpp:      atomKK->k_dihedral_atom1.modify<LMPDeviceType>();
atom_vec_molecular_kokkos.cpp:      atomKK->k_dihedral_atom2.modify<LMPDeviceType>();
atom_vec_molecular_kokkos.cpp:      atomKK->k_dihedral_atom3.modify<LMPDeviceType>();
atom_vec_molecular_kokkos.cpp:      atomKK->k_dihedral_atom4.modify<LMPDeviceType>();
atom_vec_molecular_kokkos.cpp:      atomKK->k_num_improper.modify<LMPDeviceType>();
atom_vec_molecular_kokkos.cpp:      atomKK->k_improper_type.modify<LMPDeviceType>();
atom_vec_molecular_kokkos.cpp:      atomKK->k_improper_atom1.modify<LMPDeviceType>();
atom_vec_molecular_kokkos.cpp:      atomKK->k_improper_atom2.modify<LMPDeviceType>();
atom_vec_molecular_kokkos.cpp:      atomKK->k_improper_atom3.modify<LMPDeviceType>();
atom_vec_molecular_kokkos.cpp:      atomKK->k_improper_atom4.modify<LMPDeviceType>();
comm_kokkos.cpp:      k_buf_send.modify<LMPDeviceType>();
neighbor_kokkos.cpp:    k_bondlist.modify<LMPDeviceType>();
neighbor_kokkos.cpp:    k_anglelist.modify<LMPDeviceType>();
neighbor_kokkos.cpp:    k_dihedrallist.modify<LMPDeviceType>();
neighbor_kokkos.cpp:    k_improperlist.modify<LMPDeviceType>();
verlet_kokkos.cpp:      atomKK->k_f.modify<LMPDeviceType>();
